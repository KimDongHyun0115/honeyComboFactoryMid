package model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import model.common.JDBCUtil;
import model.dto.ProductComboDTO;

public class ProductComboDAO {
	// 1. 목록 출력

	// 1. 전체 출력 인기순
	final String SELECTALLPOPULAR ="SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, "
			+ "(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) "
			+ " AS PRODUCT_COMBO_PRICE, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, IFNULL(SALES.TOTAL_SALES, 0) AS TOTAL_SALES, "
			+ "(SELECT COUNT(*) FROM PRODUCT_COMBO) AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = "
			+ "PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = "
			+ "PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = "
			+ "PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER LEFT JOIN (SELECT PRODUCT_COMBO_NUMBER, SUM(PURCHASE_PRODUCT_COUNT) AS TOTAL_SALES FROM PURCHASE_DETAIL "
			+ "GROUP BY PRODUCT_COMBO_NUMBER) SALES ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = SALES.PRODUCT_COMBO_NUMBER ORDER BY TOTAL_SALES DESC LIMIT ?, ?";

	// 2. 전체 출력 가격 높은순
	final String SELECTALLPRICEDESC = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, "
			+ "IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO) AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO "
			+ "LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER LEFT JOIN PRODUCT_SINGLE "
			+ "AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE "
			+ "AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE "
			+ "AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER LEFT JOIN PURCHASE_DETAIL "
			+ "ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY PRODUCT_COMBO_PRICE DESC LIMIT ?, ?";

	// 3. 전체 출력 가격 낮은순
	final String SELECTALLPRICEASC = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, "
			+ "IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO) AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO "
			+ "LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 "
			+ "ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON "
			+ "PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 "
			+ "ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER LEFT JOIN PURCHASE_DETAIL "
			+ "ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY PRODUCT_COMBO_PRICE ASC LIMIT ?, ?";


	// 4. 카테고리별 인기순
	final String SELECTALLCATEGORYPOPULAR = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, "
			+ "IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO WHERE PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY = ?) "
			+ "AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE "
			+ "AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER LEFT JOIN PURCHASE_DETAIL ON "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY = ? GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY TOTAL_SALES DESC LIMIT ?, ?";

	// 5. 카테고리별 가격 높은순
	final String SELECTALLCATEGORYDESC = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, "
			+ "IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO WHERE PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY = ?) "
			+ "AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY = ? "
			+ "GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY PRODUCT_COMBO_PRICE DESC LIMIT ?, ?";

	// 6. 카테고리별 가격 낮은순
	final String SELECTALLCATEGORYASC = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, "
			+ "IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO WHERE PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY = ?) "
			+ "AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER LEFT JOIN "
			+ "PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE "
			+ "AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER LEFT JOIN PURCHASE_DETAIL "
			+ "ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY = ? "
			+ "GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY PRODUCT_COMBO_PRICE "
			+ "ASC LIMIT ?, ?";

	// 7. 콤보 상품 상세 조회
	final String SELECTONE = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_SINGLE.PRODUCT_SINGLE_NAME AS COMPONENT_NAME, (IFNULL(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + "
			+ "IFNULL(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + IFNULL(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, "
			+ "LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, "
			+ "IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES FROM PRODUCT_COMBO LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = "
			+ "PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE ON PRODUCT_COMBO_COMPONENT.PRODUCT_SINGLE_NUMBER = PRODUCT_SINGLE.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 "
			+ "ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 "
			+ "ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 "
			+ "ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = ? "
			+ "GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_SINGLE.PRODUCT_SINGLE_NAME, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE";

	// 8. 콤보 상품 추가
	final String INSERT = "INSERT INTO PRODUCT_COMBO (PRODUCT_COMBO_NUMBER, PRODUCT_COMBO_NAME, PRODUCT_COMBO_IMAGE, PRODUCT_COMBO_STORE, PRODUCT_COMBO_INFORMATION) VALUES (?, ?, ?, ?, ?)";

	// 9. 콤보 상품 삭제
	final String DELETE  = "DELETE FROM PRODUCT_COMBO WHERE PRODUCT_COMBO_NUMBER = ?";

	// 10. 콤보 상품 수정
	final String UPDATE = "UPDATE PRODUCT_COMBO SET PRODUCT_COMBO_NAME = ?, PRODUCT_COMBO_IMAGE = ?, PRODUCT_COMBO_INFORMATION = ? WHERE PRODUCT_COMBO_NUMBER = ?";	

	// 11. CU 콤보 상품 판매순 (STORE = 0)
	final String SELECTALLCUPOPULAR = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, SUM(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, "
			+ "LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, "
			+ "99999)) AS PRODUCT_COMBO_STOCK, IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO WHERE PRODUCT_COMBO.PRODUCT_COMBO_STORE = 0) "
			+ "AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_STORE = 0 "
			+ "GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY TOTAL_SALES DESC LIMIT ?, ?";

	// 12. GS25 콤보 상품 판매순 (STORE = 1)
	final String SELECTALLGSPOPULAR = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, SUM(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, "
			+ "LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) "
			+ "AS PRODUCT_COMBO_STOCK, IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO WHERE PRODUCT_COMBO.PRODUCT_COMBO_STORE = 1) "
			+ "AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE "
			+ "AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 "
			+ "ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER "
			+ "= PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_STORE = 1 GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, "
			+ "PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY TOTAL_SALES DESC LIMIT ?, ?";

	// 13. 상단 광고 MD픽 출력
	final String SELECTONEADVERTISEMENT = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "(IFNULL(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + IFNULL(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + IFNULL(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, "
			+ "LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) "
			+ "AS PRODUCT_COMBO_STOCK, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES "
			+ "FROM PRODUCT_COMBO LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER LEFT JOIN PRODUCT_COMBO_COMPONENT "
			+ "ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = "
			+ "PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = ? "
			+ "GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, "
			+ "PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE";
	// AD_NUMBER에서 COMBO_NUMBER 받기로 수정

	// 14. MD픽 상품 출력(재고 많은 순)
	final String SELECTALLMD = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, "
			+ "LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) "
			+ "AS PRODUCT_COMBO_STOCK, IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO WHERE PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY = 'MD') "
			+ "AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY = 'MD' "
			+ "GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK "
			+ "ORDER BY PRODUCT_COMBO_STOCK DESC LIMIT ?, ?";

	// 15. 핫이슈 상품 출력(재고 적은 순)
	final String SELECTALLHOTISSUE = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, "
			+ "LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) "
			+ "AS PRODUCT_COMBO_STOCK, IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, (SELECT COUNT(*) FROM PRODUCT_COMBO) AS TOTAL_COUNT_NUMBER "
			+ "FROM PRODUCT_COMBO LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY PRODUCT_COMBO_STOCK ASC LIMIT ?, ?";
	// 16. 검색 (인기순)
	final String SELECTALLSEARCHPOPULAR = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, "
			+ "LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) "
			+ "AS PRODUCT_COMBO_STOCK, IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, COUNT(*) OVER() AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO "
			+ "LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER LEFT JOIN PRODUCT_SINGLE AS "
			+ "PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS "
			+ "PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER LEFT JOIN PRODUCT_SINGLE AS "
			+ "PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER LEFT JOIN PURCHASE_DETAIL ON "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_NAME LIKE CONCAT('%', ?, '%') "
			+ "GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK "
			+ "ORDER BY TOTAL_SALES DESC LIMIT ?, ?";
	// 17. 검색 (가격높은순)
	final String SELECTALLSEARCHDESC = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, "
			+ "(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, "
			+ "IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, COUNT(*) OVER() AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO "
			+ "LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_NAME "
			+ "LIKE CONCAT('%', ?, '%') GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_STORE, PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK ORDER BY PRODUCT_COMBO_PRICE DESC LIMIT ?, ?";
	// 18. 검색 (가격낮은순)
	final String SELECTALLSEARCHASC = "SELECT PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, (COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, 0) + "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, 0) + COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, 0)) AS PRODUCT_COMBO_PRICE, LEAST(COALESCE(PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, 99999), "
			+ "COALESCE(PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, 99999), COALESCE(PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK, 99999)) AS PRODUCT_COMBO_STOCK, "
			+ "IFNULL(SUM(PURCHASE_DETAIL.PURCHASE_PRODUCT_COUNT), 0) AS TOTAL_SALES, COUNT(*) OVER() AS TOTAL_COUNT_NUMBER FROM PRODUCT_COMBO "
			+ "LEFT JOIN PRODUCT_COMBO_COMPONENT ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_1 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_ONE = PRODUCT_SINGLE_1.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_2 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_TWO = PRODUCT_SINGLE_2.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PRODUCT_SINGLE AS PRODUCT_SINGLE_3 ON PRODUCT_COMBO_COMPONENT.PRODUCT_COMBO_COMPONENT_THREE = PRODUCT_SINGLE_3.PRODUCT_SINGLE_NUMBER "
			+ "LEFT JOIN PURCHASE_DETAIL ON PRODUCT_COMBO.PRODUCT_COMBO_NUMBER = PURCHASE_DETAIL.PRODUCT_COMBO_NUMBER WHERE PRODUCT_COMBO.PRODUCT_COMBO_NAME "
			+ "LIKE CONCAT('%', ?, '%') GROUP BY PRODUCT_COMBO.PRODUCT_COMBO_NUMBER, PRODUCT_COMBO.PRODUCT_COMBO_NAME, PRODUCT_COMBO.PRODUCT_COMBO_IMAGE, PRODUCT_COMBO.PRODUCT_COMBO_STORE, "
			+ "PRODUCT_COMBO.PRODUCT_COMBO_CATEGORY, PRODUCT_COMBO.PRODUCT_COMBO_INFORMATION, PRODUCT_SINGLE_1.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_2.PRODUCT_SINGLE_PRICE, "
			+ "PRODUCT_SINGLE_3.PRODUCT_SINGLE_PRICE, PRODUCT_SINGLE_1.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_2.PRODUCT_SINGLE_STOCK, PRODUCT_SINGLE_3.PRODUCT_SINGLE_STOCK "
			+ "ORDER BY PRODUCT_COMBO_PRICE ASC LIMIT ?, ?";

	public ArrayList<ProductComboDTO> selectAll(ProductComboDTO productComboDTO) {
		ArrayList<ProductComboDTO> datas = new ArrayList<ProductComboDTO>();
		Connection conn=null;
		PreparedStatement pstmt=null;
		System.out.println("[selectAll] 콤보 상품 목록 조회 시작");
		try {
			conn=JDBCUtil.connect();
			System.out.println("[selectAll] DB 연결 완료");

			if(productComboDTO.getCondition().equals("SELECTALLPOPULAR")) {
				System.out.println("[selectAll] 조건: " +SELECTALLPOPULAR);
				pstmt=conn.prepareStatement(SELECTALLPOPULAR);
				pstmt.setInt(1, productComboDTO.getProductComboIndex());
				pstmt.setInt(2, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] 인기순: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			}
			else if(productComboDTO.getCondition().equals("SELECTALLPRICEDESC")){
				System.out.println("[selectAll] 조건: " +SELECTALLPRICEDESC);
				pstmt=conn.prepareStatement(SELECTALLPRICEDESC);
				pstmt.setInt(1, productComboDTO.getProductComboIndex());
				pstmt.setInt(2, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] 인기내림차순: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			}
			else if(productComboDTO.getCondition().equals("SELECTALLPRICEASC")){
				System.out.println("[selectAll] 조건: " +SELECTALLPRICEASC);
				pstmt=conn.prepareStatement(SELECTALLPRICEASC);
				pstmt.setInt(1, productComboDTO.getProductComboIndex());
				pstmt.setInt(2, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] 가격오름차순: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			}
			else if(productComboDTO.getCondition().equals("SELECTALLCATEGORYPOPULAR")){
				System.out.println("[selectAll] 조건: " +SELECTALLCATEGORYPOPULAR);
				pstmt=conn.prepareStatement(SELECTALLCATEGORYPOPULAR);
				pstmt.setString(1, productComboDTO.getProductComboCategory());
				pstmt.setString(2, productComboDTO.getProductComboCategory());
				pstmt.setInt(3, productComboDTO.getProductComboIndex());
				pstmt.setInt(4, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] 카테고리인기순: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			}
			else if(productComboDTO.getCondition().equals("SELECTALLCATEGORYDESC")){
				System.out.println("[selectAll] 조건: " +SELECTALLCATEGORYDESC);
				pstmt=conn.prepareStatement(SELECTALLCATEGORYDESC);
				pstmt.setString(1, productComboDTO.getProductComboCategory());
				pstmt.setString(2, productComboDTO.getProductComboCategory());
				pstmt.setInt(3, productComboDTO.getProductComboIndex());
				pstmt.setInt(4, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] 카테고리내림차순: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());
			}
			else if(productComboDTO.getCondition().equals("SELECTALLCATEGORYASC")){
				System.out.println("[selectAll] 조건: " +SELECTALLCATEGORYASC);
				pstmt=conn.prepareStatement(SELECTALLCATEGORYASC);
				pstmt.setString(1, productComboDTO.getProductComboCategory());
				pstmt.setString(2, productComboDTO.getProductComboCategory());
				pstmt.setInt(3, productComboDTO.getProductComboIndex());
				pstmt.setInt(4, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] 카테고리오름차순: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			}
			else if(productComboDTO.getCondition().equals("SELECTALLCUPOPULAR")){
				System.out.println("[selectAll] 조건: " +SELECTALLCUPOPULAR);
				pstmt=conn.prepareStatement(SELECTALLCUPOPULAR);
				pstmt.setInt(1, productComboDTO.getProductComboIndex());
				pstmt.setInt(2, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] CU인기순: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			}
			else if(productComboDTO.getCondition().equals("SELECTALLGSPOPULAR")){
				System.out.println("[selectAll] 조건: " +SELECTALLGSPOPULAR);
				pstmt=conn.prepareStatement(SELECTALLGSPOPULAR);
				pstmt.setInt(1, productComboDTO.getProductComboIndex());
				pstmt.setInt(2, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] GS인기순: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			} // MD픽
			else if(productComboDTO.getCondition().equals("SELECTALLMD")){
				System.out.println("[selectAll] 조건: " + SELECTALLMD);
				pstmt=conn.prepareStatement(SELECTALLMD);
				pstmt.setInt(1, productComboDTO.getProductComboIndex());
				pstmt.setInt(2, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] MD: " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			} // 핫이슈
			else if(productComboDTO.getCondition().equals("SELECTALLHOTISSUE")){
				System.out.println("[selectAll] 조건: " + SELECTALLHOTISSUE);
				pstmt=conn.prepareStatement(SELECTALLHOTISSUE);
				pstmt.setInt(1, productComboDTO.getProductComboIndex());
				pstmt.setInt(2, productComboDTO.getProductComboContentCount());
				System.out.println("[selectAll] HOTISUUE : " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			} // 검색(인기순)
			else if(productComboDTO.getCondition().equals("SELECTALLSEARCHPOPULAR")){
				System.out.println("[selectAll] 조건: " + SELECTALLSEARCHPOPULAR);
				pstmt=conn.prepareStatement(SELECTALLSEARCHPOPULAR);
				pstmt.setString(1, productComboDTO.getSearchKeyword()); 
				pstmt.setInt(2, productComboDTO.getProductComboIndex()); 
				pstmt.setInt(3, productComboDTO.getProductComboContentCount()); 
				System.out.println("[selectAll] 검색인기순 : " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			} // 검색(최신순)
			else if(productComboDTO.getCondition().equals("SELECTALLSEARCHDESC")){
				System.out.println("[selectAll] 조건: " + SELECTALLSEARCHDESC);
				pstmt=conn.prepareStatement(SELECTALLSEARCHDESC);
				pstmt.setString(1, productComboDTO.getSearchKeyword()); 
				pstmt.setInt(2, productComboDTO.getProductComboIndex()); 
				pstmt.setInt(3, productComboDTO.getProductComboContentCount()); 
				System.out.println("[selectAll] 검색최신순 : " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			} // 검색(오래된순)
			else if(productComboDTO.getCondition().equals("SELECTALLSEARCHASC")){
				System.out.println("[selectAll] 조건: " + SELECTALLSEARCHASC);
				pstmt=conn.prepareStatement(SELECTALLSEARCHASC);
				pstmt.setString(1, productComboDTO.getSearchKeyword()); 
				pstmt.setInt(2, productComboDTO.getProductComboIndex()); 
				pstmt.setInt(3, productComboDTO.getProductComboContentCount()); 
				System.out.println("[selectAll] 검색오름차순 : " + productComboDTO.getProductComboIndex() + ", " + productComboDTO.getProductComboContentCount());

			}
			ResultSet rs=pstmt.executeQuery();
			System.out.println("[selectAll] 쿼리 실행 완료");
			while(rs.next()) { 
				ProductComboDTO data = new ProductComboDTO();
				System.out.println("[selectAll] 결과 추출 시작");

				if (productComboDTO.getCondition().equals("SELECTALLPOPULAR") || 
						productComboDTO.getCondition().equals("SELECTALLMD") || 
						productComboDTO.getCondition().equals("SELECTALLHOTISSUE")) {
					data.setProductComboStock(rs.getInt("PRODUCT_COMBO_STOCK"));
				}

				data.setProductComboNumber(rs.getLong("PRODUCT_COMBO_NUMBER"));
				data.setProductComboName(rs.getString("PRODUCT_COMBO_NAME"));
				data.setProductComboImage(rs.getString("PRODUCT_COMBO_IMAGE"));
				data.setProductComboCategory(rs.getString("PRODUCT_COMBO_CATEGORY"));
				data.setProductComboPrice(rs.getInt("PRODUCT_COMBO_PRICE"));
				data.setTotalCountNumber(rs.getLong("TOTAL_COUNT_NUMBER"));
				data.setProductComboStock(rs.getInt("PRODUCT_COMBO_STOCK"));
				data.setProductComboStore(rs.getInt("PRODUCT_COMBO_STORE"));
				data.setProductComboInformation(rs.getString("PRODUCT_COMBO_INFORMATION"));
				datas.add(data);
				System.out.println("M 로그 : ["+datas+"]");
			}
		}catch(Exception e) {
			System.out.println("[selectOne] 예외 발생: " + e.getMessage());
			e.printStackTrace();
		}finally {
			JDBCUtil.disconnect(conn, pstmt);
			System.out.println("[selectOne] DB 연결 해제");

		}
		return datas;
	}

	public ProductComboDTO selectOne(ProductComboDTO productComboDTO){
		ProductComboDTO data=null;
		Connection conn=null;
		PreparedStatement pstmt=null;
		System.out.println("[selectOne] 콤보 상품 상세 조회 시작");

		try {
			conn=JDBCUtil.connect();
			System.out.println("[selectOne] DB 연결 완료");

			if(productComboDTO.getCondition().equals("SELECTONE")) {
				pstmt=conn.prepareStatement(SELECTONE);
				pstmt.setLong(1, productComboDTO.getProductComboNumber());
				System.out.println("[selectOne] 조회번호: " + productComboDTO.getProductComboNumber());


			}	
			else if(productComboDTO.getCondition().equals("SELECTONEADVERTISEMENT")) {
				pstmt=conn.prepareStatement(SELECTONEADVERTISEMENT);
				pstmt.setInt(1, productComboDTO.getProductComboADNumber());
				System.out.println("[selectOne] 광고 번호: " + productComboDTO.getProductComboADNumber());

			}
			ResultSet rs=pstmt.executeQuery();
			System.out.println("[selectOne] 쿼리 실행 완료");

			if(rs.next()) {
				System.out.println("[selectOne] 데이터 조회 성공");
				data = new ProductComboDTO();
				data.setProductComboNumber(rs.getLong("PRODUCT_COMBO_NUMBER"));
				data.setProductComboName(rs.getString("PRODUCT_COMBO_NAME"));
				data.setProductComboImage(rs.getString("PRODUCT_COMBO_IMAGE"));
				data.setProductComboStore(rs.getInt("PRODUCT_COMBO_STORE"));
				data.setProductComboCategory(rs.getString("PRODUCT_COMBO_CATEGORY"));
				data.setProductComboInformation(rs.getString("PRODUCT_COMBO_INFORMATION"));
				data.setProductComboPrice(rs.getInt("PRODUCT_COMBO_PRICE"));
				data.setProductComboStock(rs.getInt("PRODUCT_COMBO_STOCK"));
				System.out.println("[selectOne] DTO 구성 완료: " + data.toString());

			}
		}catch(Exception e) {
			System.out.println("[selectOne] 예외 발생: " + e.getMessage());
			e.printStackTrace();
		}finally {
			JDBCUtil.disconnect(conn, pstmt);
			System.out.println("[selectOne] DB 연결 해제");
		}
		return data;
	}
	public boolean insert(ProductComboDTO productComboDTO){
		System.out.println("[insert] 콤보 상품 등록 시작");
		Connection conn=null;
		PreparedStatement pstmt=null;
		try {
			conn=JDBCUtil.connect();
			System.out.println("[insert] DB 연결 완료");
			pstmt=conn.prepareStatement(INSERT);
			pstmt.setLong(1, productComboDTO.getProductComboNumber());
			pstmt.setString(2, productComboDTO.getProductComboName());
			pstmt.setString(3, productComboDTO.getProductComboImage());
			pstmt.setInt(4, productComboDTO.getProductComboStore());
			pstmt.setString(5, productComboDTO.getProductComboInformation());
			System.out.println("[insert] 콤보상품등록완료: " + productComboDTO.toString());


			int rs=pstmt.executeUpdate();
			System.out.println("[insert] 실행 결과 행 수: " + rs);

			if(rs<=0) {
				System.out.println("[insert] 등록 실패");
				return false;
			}
		}catch(Exception e) {
			System.out.println("[insert] 예외 발생: " + e.getMessage());
			e.printStackTrace();
			return false;
		}finally {
			JDBCUtil.disconnect(conn, pstmt);
			System.out.println("[insert] DB 연결 해제");

		}
		return true;
	}

	public boolean update(ProductComboDTO productComboDTO){
		System.out.println("[update] 콤보 상품 수정 시작");
		Connection conn=null;
		PreparedStatement pstmt=null;
		try {
			conn=JDBCUtil.connect();
			System.out.println("[update] DB 연결 완료");

			pstmt=conn.prepareStatement(UPDATE);
			pstmt.setString(1, productComboDTO.getProductComboName());
			pstmt.setString(2, productComboDTO.getProductComboImage());
			pstmt.setInt(3, productComboDTO.getProductComboStore());
			pstmt.setString(4, productComboDTO.getProductComboInformation());
			pstmt.setLong(5, productComboDTO.getProductComboNumber());
			System.out.println("[update] 상품수정 완료: " + productComboDTO.toString());

			int rs=pstmt.executeUpdate();
			System.out.println("[update] 실행 결과 행 수: " + rs);

			if(rs<=0) {
				System.out.println("[update] 수정 실패");
				return false;
			}
		}catch(Exception e) {
			System.out.println("[update] 예외 발생: " + e.getMessage());
			e.printStackTrace();
			return false;
		}finally {
			JDBCUtil.disconnect(conn, pstmt);
			System.out.println("[update] DB 연결 해제");

		}
		return true;
	}
	public boolean delete(ProductComboDTO productComboDTO){
		System.out.println("[delete] 콤보 상품 삭제 시작");
		Connection conn=null;
		PreparedStatement pstmt=null;
		try {
			conn=JDBCUtil.connect();
			System.out.println("[delete] DB 연결 완료");

			pstmt=conn.prepareStatement(DELETE);
			pstmt.setLong(1,productComboDTO.getProductComboNumber());
			System.out.println("[delete] 삭제: " + productComboDTO.getProductComboNumber());

			int rs=pstmt.executeUpdate();
			if(rs<=0) {
				System.out.println("[delete] 삭제 실패");
				return false;
			}

		}catch(Exception e) {
			System.out.println("[delete] 예외 발생: " + e.getMessage());
			e.printStackTrace();
			return false;
		}finally {
			JDBCUtil.disconnect(conn, pstmt);
			System.out.println("[delete] DB 연결 해제");
		}
		return true;
	}
}
